// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	// Decode input
	Decode(in=instruction, 
		addressForA=addressForA,  
		address[15]= addressM, 
		b1=b1, b2=b2, b3=b3, b4=b4, b5=b5, b6=b6, b7=b7, 
		b8=b8, b9=b9, b10=b10, b11=b11, b12=b12, b13=b13, 
		b14=b14, b15=b15, b16=b16,
		a=a,
		c[6]=c, 
		d[3]=d,
		j[3]=j,
		aInstruction=aInstruction,
		cInstruction=cInstruction,
		writeM=writeM);
	
	Mux16(a=instruction, b=ALUout, sel=, out=inA);
	ARegister(in=inA, load=b6, out=aRegOut);
	Mux16(a=aRegOut, b=inM, sel=, outAM);
	ALU(x=outD, y=outAM, zx=b12, nx=b11, zy=b10, ny=b9, f=b8, no=b7, zr=zr, ng=ng, out=outM, out=ALUout);
	DRegister(in=ALUout, load=b5, out=outD);
	PC(in=aRegOut, load=jumpSel, reset=reset, out=pcOut);
	
	// Jump logic
	// Split into 8 separate calculations
	Mux8Way(in=true, sel=j, a=noJump, 
							   b=OGZ,
							   c=OEZ,
							   d=OGEZ,
							   e=OLZ,
							   f=ONEZ,
							   g=OLEZ,
							   h=jump);
							   
	// no jump
	Not(in=noJump, out=oNoJump);
	
	// OGZ
	Not(in=ng, out=rng);			// used multiple times
	And(a=OGZ, b=rng, out=ogzNng);
	Not(in=zr, out=rzr);			// used multiple times
	And(a=ogzNng, b=rzr, out=oOGZ);
	
	// OEZ
	And(a=OEZ, b=zr, out=oOEZ);
	
	// OGEZ
	And(a=OGEZ, b=rng, out=oOGEZ);
	
	// OLZ
	And(a=OLZ, b=ng, out=olzNng);
	And(a=olzNng, b=rzr, out=oOLZ);
	
	// ONEZ
	And(a=ONEZ, b=rzr, out=oONEZ);
	
	// OLEZ
	And(a=OLEZ, b=ng, out=olezNng);
	And(a=olezNng, b=zr, out=oOLEZ);
	
	// Regroup to get final result
	DMux8Way(a=oNoJump, b=oOGZ, c=oOEZ, d=oOGEZ, e=oOLZ, f=oONEZ, g=oOLEZ, h=jump, sel=j, out=jumpSel);
			 
}